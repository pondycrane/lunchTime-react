{
  "name": "react-datalist",
  "version": "2.0.0",
  "description": "A <datalist> polyfill for reactjs",
  "main": "./lib/ReactDataList",
  "scripts": {
    "test": "mocha --compilers js:babel/register,styl:mocha-stylus-compiler -R nyan --check-leaks -w",
    "build": "babel src/ --out-dir lib && ./build-style.sh",
    "build-demo": "browserify -t babelify demo/app.js > demo/bundle.js && stylus demo/app.styl -p > demo/bundle.css",
    "start-demo": "static demo"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/asbjornenge/react-datalist.git"
  },
  "keywords": [
    "browser",
    "datalist",
    "dom",
    "react",
    "react-component"
  ],
  "author": {
    "name": "Asbjorn Enge",
    "email": "asbjorn@hanafjedle.net"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/asbjornenge/react-datalist/issues"
  },
  "homepage": "https://github.com/asbjornenge/react-datalist",
  "browser": {
    "jsdom": false
  },
  "testling": {
    "harness": "mocha-bdd",
    "files": "test/spec.js",
    "browsers": [
      "ie/9..latest",
      "chrome/23..latest",
      "firefox/22..latest",
      "safari/latest",
      "opera/12..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "peerDependencies": {
    "react": ">=0.13.0"
  },
  "devDependencies": {
    "babel": "^4.7.16",
    "babelify": "^5.0.4",
    "lodash": "^2.4.1",
    "mocha": "^1.18.2",
    "mocha-stylus-compiler": "^1.0.0",
    "nanodom": "0.0.3",
    "stylusify": "^1.0.0",
    "testdom": "^1.0.1"
  },
  "readme": "# React-datalist\n\n[![testling badge](https://ci.testling.com/asbjornenge/react-datalist.png)](https://ci.testling.com/asbjornenge/react-datalist)\n\nReact-datalist is an attempt at making a [<code>\\<datalist></code>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist) polyfill as a reusable [react](http://facebook.github.io/react/) module.  \n\nFeedback in the form of [issues](https://github.com/asbjornenge/react-datalist/issues) and [pull-requests](https://github.com/asbjornenge/react-datalist/pulls) is very much appreciated!\n\nCheck out the [**DEMO**](http://www.asbjornenge.com/react-datalist/)\n\n**PS!** For use with react@0.12 or earlier, user react-datalist@1.3.1. 2.0.0 support react@0.13.0 and newer.\n\n## Install\n\n\tnpm install react-datalist\n\n## Use\n\n\tvar React = require('react')\n\tvar ReactDatalist = require('react-datalist')\n\n\tvar options = ['apple','orange','pear','pineapple','melon']\n\tReact.render(<ReactDatalist list=\"fruit\" options={options} />, document.body)\n\n## Props\n\n\tlist             * - <datalist id=\"list\"> and <input list=\"list\">\n\toptions          * - the available options\n\tplaceholder        - a placeholder for the input field\n\tforcePoly          - always use the polyfill                     (default false)\n\tblurTimeout        - timeout after blur before hinding opts      (default 200ms)\n\tautoPosition       - automatically position the options list     (default true)\n\tinitialFilter      - set the initial input value                 (default '')\n\thideOptionsOnEsc   - hide options on esc                         (default true)\n\thideOptionsOnBlur  - hide options on input blur                  (default true)\n    includeLayoutStyle - include internal layout styling (style tag) (default true)\n\tonOptionSelected   - callback triggered when option is considered selected\n\tgetController      - pass a function to collect a controller object (see below)\n\n\t* = required\n\n### getController\n\nThe getController property is there to enable external control of the component's inner state - while keeping the state in sync. It takes a function that will return a controller object.\n\n    getController : function(controller) { /* ... */ }\n\nThe controller offers the following\n\n\tcontroller.setFilter(string, callback)  - sets the value of the input\n\tcontroller.toggleOptions(callback)      - toggle show/hide of options. shown bool passed to callback.\n\tcontroller.getState()                   - gets the current inner state\n\tcontroller.setState(newState, callback) - set a new inner state\n\n## !TLDR;\n\nReact-datalist includes both a ***input*** and a ***datalist*** element. In order to stay fairly simple to use, align with react and avoid native events and other trickery, this was necessary. The structure is as follows:\n\n\t// Native\n\n\t<div class=\"react-datalist-container\">\n\t\t<input class=\"react-datalist-input\">\n\t\t<datalist class=\"react-datalist\">\n\t\t\t<option value=\"values\">\n\t\t</datalist>\n\t</div>\n\n\t// Polyfill\n\n\t<div class=\"react-datalist-container\">\n\t\t<input class=\"react-datalist-input\">\n\t\t<div class=\"react-datalist\">\n\t\t\t<div class=\"react-datalist-option\">values</div>\n\t\t</div>\n\t</div>\n\nIf you need to interact with the input element, attach listeners like **onInputChange**, **onInputBlur**, etc. (Note to self: expose additional input events. Note to others: encourage by creating issues)\n\n#### Styling\n\nThere is also some (quite useful) styling you can/should use. You can find it under *node_modules/react-datalist/react-datalist.styl*. If you don't use stylus it's pretty small and easy to copy. I might include it if I pack up a UMD module for React-datalist. Anyone want that? Create an issue :-)\n\n(Note to self: Convert styling to plain css)  \n(Idea: Should I pack a commonjs module that include the styling?)\n\n#### JSX\n\nThe module itself does not make us of **JSX** as not to impose restrictions on the user.\n\n#### Features\n\nFor a full feature list check out the [spec](https://github.com/asbjornenge/react-datalist/blob/master/test/spec.js).\n\n## Changelog\n\n### 2.0.0\n\n* Support for React v0.13 :tada: :rocket:\n\n### 1.3.1\n\n* Moved react to peerDependencies with >= instaed of ^\n\n### 1.3.0\n\n* Added support for *props.className* to set extra classes (by [@blackbing](https://github.com/blackbing) [#11](https://github.com/asbjornenge/react-datalist/pull/11))\n* Added support for *props.defaultValue* to set default value (by [@blackbing](https://github.com/blackbing) [#11](https://github.com/asbjornenge/react-datalist/pull/11))\n\n### 1.2.0\n\n* Added *hideOptionsOnEsc* for the ability to opt out of hiding options when user hits esc\n* Added *controller.getState* for a sneak peak at the inner state\n* Added *controller.setState* for improved external control\n\n### 1.1.0\n\n* Bumped the blurTimeout up to 200ms (people were having issues)\n* Added the ability to specify *blurTimeout* via props\n* Added *hideOptionsOnBlur* for the ability to opt out of hide-options-on-blur\n\n### 1.0.0\n\n* Removed setFilter support\n* Added a more generic getController prop that returns an object with functions for external control\n* Added setFilter to controller\n* Added toggleOptions to controller\n\n### 0.2.0\n\n* Added support for externally controlling the filter state via the ***setFilter*** property.\n\n### 0.1.2\n\n* Minor improvement to help testing (test are too fast for my timeouts :-P)\n\n### 0.1.1\n\n* Increased hide-options timeout on blur (more time to make click register)\n* Supporting placeholder property for input\n\n### 0.1.0\n\n* Added support for passing initial input value via the ***initialFilter*** property.\n\n### 0.0.1\n\n* Initial release! YaY :-D\n\nenjoy.\n",
  "readmeFilename": "README.md",
  "_id": "react-datalist@2.0.0",
  "dist": {
    "shasum": "9218ab6cbcb4cd5da4abda23c8de36e6e0903128"
  },
  "_from": "react-datalist@",
  "_resolved": "https://registry.npmjs.org/react-datalist/-/react-datalist-2.0.0.tgz"
}
